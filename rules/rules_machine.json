{
  "version": "1.2.0",
  "created_date": "2025-10-18 14:53:50",
  "total_rules": 59,
  "rules": [
    {
      "rule_id": "TAU-001",
      "name": "Classic OR 1=1 Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects always-true condition OR 1=1 used to bypass authentication",
      "regex": "(?i)(['\\\"]|^)\\s*OR\\s+['\\\"]*\\d+\\s*=\\s*\\d+['\\\"]*",
      "purpose": "Identify basic tautology attacks in WHERE clauses",
      "severity": "HIGH",
      "confidence": 0.95,
      "priority": 10,
      "enabled": true,
      "example_matches": [
        "' OR 1=1--",
        "admin' OR 1=1#",
        "' OR '1'='1",
        "password' OR 1=1 LIMIT 1--"
      ],
      "false_positive_cases": [
        "Mathematical expressions: quantity OR 1=1 (legitimate comparison)",
        "Text containing 'OR 1=1' in documentation"
      ],
      "notes": "Case-insensitive, handles quotes around values"
    },
    {
      "rule_id": "TAU-002",
      "name": "String Equality Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects OR 'a'='a' style always-true string comparisons",
      "regex": "(?i)\\bOR\\s+['\\\"][\\w\\s]{1,20}['\\\"]\\\\s*=\\\\s*['\\\"][\\w\\s]{1,20}['\\\"]",
      "purpose": "Catch string-based tautology bypasses",
      "severity": "HIGH",
      "confidence": 0.92,
      "priority": 9,
      "enabled": true,
      "example_matches": [
        "' OR 'a'='a'--",
        "' OR 'x'='x",
        "admin' OR 'abc'='abc'#"
      ],
      "false_positive_cases": [
        "Legitimate string comparisons in WHERE clauses",
        "Application comparing user input to constants"
      ],
      "notes": "Matches identical string comparisons with OR"
    },
    {
      "rule_id": "TAU-003",
      "name": "TRUE/FALSE Keyword Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects use of TRUE, FALSE keywords in tautology",
      "regex": "(?i)['\\\"]\\s*OR\\s+(TRUE|FALSE|1|0)\\b",
      "purpose": "Identify boolean-based tautology attacks",
      "severity": "MEDIUM",
      "confidence": 0.85,
      "priority": 7,
      "enabled": true,
      "example_matches": [
        "' OR TRUE--",
        "' OR 1",
        "password' OR FALSE#"
      ],
      "false_positive_cases": [
        "Legitimate boolean logic: status OR TRUE",
        "Boolean flags in queries"
      ],
      "notes": "Lower confidence due to legitimate OR usage"
    },
    {
      "rule_id": "TAU-004",
      "name": "IS NOT NULL Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects OR column IS NOT NULL always-true conditions",
      "regex": "(?i)\\bOR\\s+\\w+\\s+IS\\s+NOT\\s+NULL",
      "purpose": "Catch IS NOT NULL based bypasses",
      "severity": "MEDIUM",
      "confidence": 0.88,
      "priority": 6,
      "enabled": true,
      "example_matches": [
        "' OR user_id IS NOT NULL--",
        "' OR 1 IS NOT NULL#"
      ],
      "false_positive_cases": [
        "Legitimate NULL checks in complex queries"
      ],
      "notes": "Common in advanced injection attempts"
    },
    {
      "rule_id": "TAU-005",
      "name": "Parenthesized Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects tautology wrapped in parentheses",
      "regex": "(?i)\\)\\s*OR\\s*\\(\\s*['\\\"]*\\w+\\s*=\\s*\\w+['\\\"]*\\s*\\)",
      "purpose": "Identify parenthesis-escaped tautology",
      "severity": "HIGH",
      "confidence": 0.9,
      "priority": 8,
      "enabled": true,
      "example_matches": [
        "') OR ('1'='1')",
        "') OR (1=1)--"
      ],
      "false_positive_cases": [
        "Complex legitimate queries with OR in subqueries"
      ],
      "notes": "Handles multi-parameter injection"
    },
    {
      "rule_id": "TAU-006",
      "name": "AND 1=1 Probe",
      "category": "Tautology-Based Injection",
      "description": "Detects AND 1=1 testing pattern",
      "regex": "(?i)['\\\"]\\s*AND\\s+['\\\"]*\\d+\\s*=\\s*\\d+['\\\"]*",
      "purpose": "Identify injection probing attempts",
      "severity": "MEDIUM",
      "confidence": 0.75,
      "priority": 5,
      "enabled": true,
      "example_matches": [
        "' AND 1=1--",
        "id=1 AND 1=1"
      ],
      "false_positive_cases": [
        "Legitimate AND conditions with numeric comparison",
        "Version checks: version AND 1=1"
      ],
      "notes": "High false positive rate, use with caution"
    },
    {
      "rule_id": "TAU-007",
      "name": "Double Quote Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects OR with double quotes",
      "regex": "(?i)\\bOR\\s+\"[^\"]{0,20}\"\\s*=\\s*\"[^\"]{0,20}\"",
      "purpose": "Catch double-quote escaped tautology",
      "severity": "HIGH",
      "confidence": 0.91,
      "priority": 8,
      "enabled": true,
      "example_matches": [
        "\" OR \"1\"=\"1",
        "\" OR \"a\"=\"a\"--"
      ],
      "false_positive_cases": [
        "JSON data with OR operator"
      ],
      "notes": "Handles double-quote injection vectors"
    },
    {
      "rule_id": "TAU-008",
      "name": "LIKE Wildcard Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects OR LIKE '%' always-true pattern",
      "regex": "(?i)\\bOR\\s+\\w+\\s+LIKE\\s+['\\\"]*%['\\\"]*",
      "purpose": "Identify LIKE-based tautology",
      "severity": "MEDIUM",
      "confidence": 0.82,
      "priority": 6,
      "enabled": true,
      "example_matches": [
        "' OR name LIKE '%'--",
        "' OR 1 LIKE '%'"
      ],
      "false_positive_cases": [
        "Legitimate wildcard searches"
      ],
      "notes": "Lower confidence due to legitimate LIKE usage"
    },
    {
      "rule_id": "TAU-009",
      "name": "Arithmetic Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects OR with arithmetic operations",
      "regex": "(?i)\\bOR\\s+\\d+\\s*[+\\-*/]\\s*\\d+\\s*=\\s*\\d+",
      "purpose": "Catch arithmetic-based tautology",
      "severity": "LOW",
      "confidence": 0.7,
      "priority": 4,
      "enabled": true,
      "example_matches": [
        "' OR 1+1=2--",
        "' OR 5*2=10"
      ],
      "false_positive_cases": [
        "Legitimate arithmetic in queries",
        "Mathematical calculations"
      ],
      "notes": "High FP rate, disabled by default in strict mode"
    },
    {
      "rule_id": "TAU-010",
      "name": "EXISTS Subquery Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects OR EXISTS with always-true subquery",
      "regex": "(?i)\\bOR\\s+EXISTS\\s*\\(\\s*SELECT",
      "purpose": "Identify EXISTS-based bypass",
      "severity": "HIGH",
      "confidence": 0.93,
      "priority": 9,
      "enabled": true,
      "example_matches": [
        "' OR EXISTS(SELECT 1)--",
        "' OR EXISTS(SELECT * FROM users)--"
      ],
      "false_positive_cases": [
        "Complex legitimate queries with OR EXISTS"
      ],
      "notes": "Strong indicator of advanced injection"
    },
    {
      "rule_id": "UNI-001",
      "name": "UNION SELECT Pattern",
      "category": "UNION-Based Injection",
      "description": "Detects UNION SELECT keyword combination",
      "regex": "(?i)(['\\\"];?|\\bFROM\\b)\\s*UNION\\s+(ALL\\s+)?SELECT\\b",
      "purpose": "Primary UNION injection detector",
      "severity": "CRITICAL",
      "confidence": 0.98,
      "priority": 15,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT NULL--",
        "' UNION ALL SELECT username, password FROM users--",
        "1' UNION SELECT @@version--"
      ],
      "false_positive_cases": [
        "Legitimate UNION in stored procedures",
        "Documentation containing UNION SELECT"
      ],
      "notes": "High confidence, primary UNION detector"
    },
    {
      "rule_id": "UNI-002",
      "name": "UNION with NULL Columns",
      "category": "UNION-Based Injection",
      "description": "Detects UNION SELECT with NULL padding",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT\\s+(NULL\\s*,\\s*)+NULL",
      "purpose": "Identify column enumeration attempts",
      "severity": "CRITICAL",
      "confidence": 0.97,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT NULL, NULL, NULL--",
        "' UNION ALL SELECT NULL, NULL--"
      ],
      "false_positive_cases": [
        "Legitimate queries selecting NULL values"
      ],
      "notes": "Strong indicator of column count testing"
    },
    {
      "rule_id": "UNI-003",
      "name": "UNION from information_schema",
      "category": "UNION-Based Injection",
      "description": "Detects UNION accessing schema information",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*FROM\\s+information_schema",
      "purpose": "Catch database schema enumeration",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 16,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT table_name FROM information_schema.tables--",
        "' UNION SELECT column_name FROM information_schema.columns--"
      ],
      "false_positive_cases": [
        "DBA maintenance scripts"
      ],
      "notes": "Very high confidence, schema extraction attempt"
    },
    {
      "rule_id": "UNI-004",
      "name": "UNION with CONCAT",
      "category": "UNION-Based Injection",
      "description": "Detects UNION SELECT with CONCAT for data exfiltration",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*CONCAT\\s*\\(",
      "purpose": "Identify data concatenation for extraction",
      "severity": "CRITICAL",
      "confidence": 0.96,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT CONCAT(username, ':', password) FROM users--",
        "' UNION SELECT CONCAT(0x7e, version(), 0x7e)--"
      ],
      "false_positive_cases": [
        "Legitimate string concatenation in queries"
      ],
      "notes": "Indicates data aggregation attempt"
    },
    {
      "rule_id": "UNI-005",
      "name": "UNION with Numeric Sequence",
      "category": "UNION-Based Injection",
      "description": "Detects UNION SELECT 1,2,3... pattern",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT\\s+\\d+(\\s*,\\s*\\d+)+",
      "purpose": "Catch column position testing",
      "severity": "CRITICAL",
      "confidence": 0.94,
      "priority": 13,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT 1,2,3,4,5--",
        "' UNION ALL SELECT 1,2,3--"
      ],
      "false_positive_cases": [
        "Queries selecting literal numbers"
      ],
      "notes": "Column enumeration technique"
    },
    {
      "rule_id": "UNI-006",
      "name": "UNION with System Functions",
      "category": "UNION-Based Injection",
      "description": "Detects UNION accessing database version/config",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*(@@version|version\\(\\)|user\\(\\)|database\\(\\))",
      "purpose": "Identify system information extraction",
      "severity": "CRITICAL",
      "confidence": 0.98,
      "priority": 15,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT @@version--",
        "' UNION SELECT user(), database()--"
      ],
      "false_positive_cases": [
        "System diagnostics queries"
      ],
      "notes": "High value target - system enumeration"
    },
    {
      "rule_id": "UNI-007",
      "name": "UNION INTO OUTFILE",
      "category": "UNION-Based Injection",
      "description": "Detects UNION with file write attempt",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*INTO\\s+(OUT|DUMP)FILE",
      "purpose": "Catch file system write attempts",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 18,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT '<?php system($_GET[\"cmd\"]); ?>' INTO OUTFILE '/var/www/shell.php'--"
      ],
      "false_positive_cases": [
        "Legitimate export queries"
      ],
      "notes": "Extremely dangerous - remote code execution"
    },
    {
      "rule_id": "UNI-008",
      "name": "UNION with GROUP_CONCAT",
      "category": "UNION-Based Injection",
      "description": "Detects UNION with GROUP_CONCAT aggregation",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*GROUP_CONCAT\\s*\\(",
      "purpose": "Identify bulk data extraction",
      "severity": "CRITICAL",
      "confidence": 0.95,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT GROUP_CONCAT(username) FROM users--",
        "' UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables--"
      ],
      "false_positive_cases": [
        "Legitimate aggregation queries"
      ],
      "notes": "Efficient data exfiltration method"
    },
    {
      "rule_id": "UNI-009",
      "name": "UNION with LOAD_FILE",
      "category": "UNION-Based Injection",
      "description": "Detects UNION with file read function",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*LOAD_FILE\\s*\\(",
      "purpose": "Catch file system read attempts",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 17,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT LOAD_FILE('/etc/passwd')--",
        "' UNION SELECT LOAD_FILE('C:\\\\boot.ini')--"
      ],
      "false_positive_cases": [
        "Legitimate file import queries"
      ],
      "notes": "Sensitive file access attempt"
    },
    {
      "rule_id": "UNI-010",
      "name": "UNION with CHAR Function",
      "category": "UNION-Based Injection",
      "description": "Detects UNION with CHAR-based encoding",
      "regex": "(?i)\\bUNION\\s+(ALL\\s+)?SELECT.*CHAR\\s*\\(\\s*\\d+",
      "purpose": "Identify obfuscated UNION attacks",
      "severity": "CRITICAL",
      "confidence": 0.93,
      "priority": 13,
      "enabled": true,
      "example_matches": [
        "' UNION SELECT CHAR(97,100,109,105,110)--",
        "' UNION SELECT CHAR(0x41)--"
      ],
      "false_positive_cases": [
        "Character encoding in legitimate queries"
      ],
      "notes": "Evasion technique using ASCII encoding"
    },
    {
      "rule_id": "CMT-001",
      "name": "SQL Double Dash Comment",
      "category": "Comment-Based Injection",
      "description": "Detects -- comment sequence",
      "regex": "(['\\\"]|;|\\bOR\\b|\\bAND\\b|\\bSELECT\\b|\\bUNION\\b)\\s*--",
      "purpose": "Identify query truncation via comments",
      "severity": "HIGH",
      "confidence": 0.85,
      "priority": 10,
      "enabled": true,
      "example_matches": [
        "admin'--",
        "' OR 1=1--",
        "'; DROP TABLE users--"
      ],
      "false_positive_cases": [
        "URLs with --: http://example.com/page--old",
        "Email addresses: user--test@example.com",
        "Product codes: MODEL-X--2024"
      ],
      "notes": "High false positive rate, requires context"
    },
    {
      "rule_id": "CMT-002",
      "name": "SQL Hash Comment",
      "category": "Comment-Based Injection",
      "description": "Detects # comment for MySQL",
      "regex": "(['\\\"]|;|\\bOR\\b|\\bAND\\b)\\s*#(?![0-9A-Fa-f]{6}\\b)",
      "purpose": "Catch MySQL-style comment injection",
      "severity": "HIGH",
      "confidence": 0.8,
      "priority": 9,
      "enabled": true,
      "example_matches": [
        "admin'#",
        "' OR 1=1#",
        "'; DELETE FROM users#"
      ],
      "false_positive_cases": [
        "Hashtags in social media content",
        "Hex color codes: #FF5733",
        "Markdown headers"
      ],
      "notes": "MySQL specific, high FP in web content"
    },
    {
      "rule_id": "CMT-003",
      "name": "SQL Block Comment Start",
      "category": "Comment-Based Injection",
      "description": "Detects /* comment block opening",
      "regex": "/\\*.*?(SELECT|UNION|DROP|DELETE|INSERT|UPDATE|OR|AND).*?\\*/",
      "purpose": "Identify multi-line comment injection",
      "severity": "HIGH",
      "confidence": 0.88,
      "priority": 11,
      "enabled": true,
      "example_matches": [
        "admin'/*",
        "' OR 1=1/* comment */",
        "'; DROP TABLE users/*"
      ],
      "false_positive_cases": [
        "CSS comments: /* styling */",
        "JavaScript comments in code samples"
      ],
      "notes": "Can span multiple lines"
    },
    {
      "rule_id": "CMT-004",
      "name": "Comment After Quote",
      "category": "Comment-Based Injection",
      "description": "Detects quote followed immediately by comment",
      "regex": "['\\\"]\\s*(--|#|/\\*)",
      "purpose": "Catch immediate query truncation",
      "severity": "HIGH",
      "confidence": 0.92,
      "priority": 12,
      "enabled": true,
      "example_matches": [
        "admin'--",
        "password'#",
        "user'/*"
      ],
      "false_positive_cases": [
        "Legitimate string literals with special chars"
      ],
      "notes": "Strong indicator when combined with quotes"
    },
    {
      "rule_id": "CMT-005",
      "name": "Inline SQL Comment",
      "category": "Comment-Based Injection",
      "description": "Detects /*!... */ MySQL inline comment",
      "regex": "/\\*!\\d+.*?\\*/",
      "purpose": "Catch version-specific comment bypass",
      "severity": "CRITICAL",
      "confidence": 0.96,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "/*!50000 UNION SELECT */",
        "/*!32302 AND 1=1 */"
      ],
      "false_positive_cases": [
        "Rare in normal traffic"
      ],
      "notes": "MySQL conditional execution, very suspicious"
    },
    {
      "rule_id": "CMT-006",
      "name": "Comment with SQL Keywords",
      "category": "Comment-Based Injection",
      "description": "Detects comments containing SQL keywords",
      "regex": "(?i)(--|#|/\\*)\\s*(SELECT|DROP|DELETE|UPDATE|INSERT|EXEC)",
      "purpose": "Identify commented-out malicious SQL",
      "severity": "MEDIUM",
      "confidence": 0.78,
      "priority": 7,
      "enabled": true,
      "example_matches": [
        "-- SELECT * FROM users",
        "# DROP TABLE admin"
      ],
      "false_positive_cases": [
        "SQL documentation",
        "Code comments in applications"
      ],
      "notes": "Context-dependent, useful for logging"
    },
    {
      "rule_id": "CMT-007",
      "name": "Nested Comment Blocks",
      "category": "Comment-Based Injection",
      "description": "Detects nested /*/* */ comments",
      "regex": "/\\*\\s*/\\*",
      "purpose": "Catch advanced comment obfuscation",
      "severity": "MEDIUM",
      "confidence": 0.85,
      "priority": 8,
      "enabled": true,
      "example_matches": [
        "/* /* nested */ */",
        "/* /* DROP TABLE */ */"
      ],
      "false_positive_cases": [
        "Malformed code comments"
      ],
      "notes": "Rare pattern, indicates evasion attempt"
    },
    {
      "rule_id": "CMT-008",
      "name": "Comment Whitespace Obfuscation",
      "category": "Comment-Based Injection",
      "description": "Detects excessive whitespace before comments",
      "regex": "\\s{10,}(--|#|/\\*)",
      "purpose": "Identify whitespace-padded comments",
      "severity": "LOW",
      "confidence": 0.7,
      "priority": 5,
      "enabled": false,
      "example_matches": [
        "'          --",
        "'               #"
      ],
      "false_positive_cases": [
        "Formatted code with alignment"
      ],
      "notes": "Disabled by default, experimental"
    },
    {
      "rule_id": "STK-001",
      "name": "Semicolon with DROP",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by DROP statement",
      "regex": "(?i);\\s*DROP\\s+(TABLE|DATABASE|VIEW|INDEX)",
      "purpose": "Catch destructive stacked query attempts",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 20,
      "enabled": true,
      "example_matches": [
        "'; DROP TABLE users--",
        "1'; DROP DATABASE testdb--",
        "'; DROP VIEW admin_view--"
      ],
      "false_positive_cases": [
        "SQL scripts with multiple statements",
        "Stored procedures"
      ],
      "notes": "Extremely dangerous, highest priority"
    },
    {
      "rule_id": "STK-002",
      "name": "Semicolon with DELETE",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by DELETE",
      "regex": "(?i);\\s*DELETE\\s+FROM",
      "purpose": "Identify data deletion attempts",
      "severity": "CRITICAL",
      "confidence": 0.98,
      "priority": 19,
      "enabled": true,
      "example_matches": [
        "'; DELETE FROM users--",
        "1'; DELETE FROM products WHERE 1=1--"
      ],
      "false_positive_cases": [
        "Batch operations in stored procedures"
      ],
      "notes": "Data loss risk, very high severity"
    },
    {
      "rule_id": "STK-003",
      "name": "Semicolon with UPDATE",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by UPDATE",
      "regex": "(?i);\\s*UPDATE\\s+\\w+\\s+SET",
      "purpose": "Catch unauthorized data modification",
      "severity": "CRITICAL",
      "confidence": 0.97,
      "priority": 18,
      "enabled": true,
      "example_matches": [
        "'; UPDATE users SET password='hacked'--",
        "1'; UPDATE products SET price=0--"
      ],
      "false_positive_cases": [
        "Legitimate batch updates"
      ],
      "notes": "Privilege escalation potential"
    },
    {
      "rule_id": "STK-004",
      "name": "Semicolon with INSERT",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by INSERT",
      "regex": "(?i);\\s*INSERT\\s+INTO",
      "purpose": "Identify unauthorized data insertion",
      "severity": "HIGH",
      "confidence": 0.95,
      "priority": 16,
      "enabled": true,
      "example_matches": [
        "'; INSERT INTO logs VALUES ('breach')--",
        "1'; INSERT INTO admin (user) VALUES ('attacker')--"
      ],
      "false_positive_cases": [
        "Batch insert operations"
      ],
      "notes": "Can create backdoor accounts"
    },
    {
      "rule_id": "STK-005",
      "name": "Semicolon with EXEC",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by EXEC/EXECUTE",
      "regex": "(?i);\\s*(EXEC|EXECUTE)\\s+",
      "purpose": "Catch stored procedure execution",
      "severity": "CRITICAL",
      "confidence": 0.98,
      "priority": 19,
      "enabled": true,
      "example_matches": [
        "'; EXEC xp_cmdshell('dir')--",
        "'; EXECUTE sp_executesql N'malicious'--"
      ],
      "false_positive_cases": [
        "Legitimate stored procedure calls"
      ],
      "notes": "RCE potential, extremely dangerous"
    },
    {
      "rule_id": "STK-006",
      "name": "Semicolon with CREATE",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by CREATE",
      "regex": "(?i);\\s*CREATE\\s+(TABLE|DATABASE|USER|PROCEDURE)",
      "purpose": "Identify object creation attempts",
      "severity": "HIGH",
      "confidence": 0.96,
      "priority": 15,
      "enabled": true,
      "example_matches": [
        "'; CREATE TABLE backdoor (id INT)--",
        "'; CREATE USER attacker@localhost--"
      ],
      "false_positive_cases": [
        "DDL scripts"
      ],
      "notes": "Persistence mechanism"
    },
    {
      "rule_id": "STK-007",
      "name": "Semicolon with GRANT",
      "category": "Stacked Queries Injection",
      "description": "Detects semicolon followed by GRANT",
      "regex": "(?i);\\s*GRANT\\s+(ALL|SELECT|INSERT|UPDATE|DELETE)",
      "purpose": "Catch privilege escalation",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 20,
      "enabled": true,
      "example_matches": [
        "'; GRANT ALL PRIVILEGES ON *.* TO 'attacker'@'%'--"
      ],
      "false_positive_cases": [
        "DBA scripts"
      ],
      "notes": "Complete system compromise potential"
    },
    {
      "rule_id": "STK-008",
      "name": "Multiple Semicolons",
      "category": "Stacked Queries Injection",
      "description": "Detects multiple consecutive semicolons",
      "regex": ";\\s*;",
      "purpose": "Identify chained statement attempts",
      "severity": "MEDIUM",
      "confidence": 0.75,
      "priority": 7,
      "enabled": true,
      "example_matches": [
        "'; ; DROP TABLE users--",
        "1; ; DELETE FROM logs--"
      ],
      "false_positive_cases": [
        "Malformed queries",
        "CSS with double semicolons"
      ],
      "notes": "May indicate fuzzing or obfuscation"
    },
    {
      "rule_id": "TMB-001",
      "name": "MySQL SLEEP Function",
      "category": "Time-Based Blind Injection",
      "description": "Detects MySQL SLEEP function",
      "regex": "(?i)\\bSLEEP\\s*\\(\\s*\\d+\\s*\\)",
      "purpose": "Identify time-delay based blind injection",
      "severity": "CRITICAL",
      "confidence": 0.97,
      "priority": 17,
      "enabled": true,
      "example_matches": [
        "' AND SLEEP(5)--",
        "' OR IF(1=1, SLEEP(5), 0)--",
        "' AND (SELECT * FROM (SELECT(SLEEP(5)))xyz)--"
      ],
      "false_positive_cases": [
        "Performance testing queries",
        "Documentation mentioning SLEEP"
      ],
      "notes": "Clear blind injection indicator"
    },
    {
      "rule_id": "TMB-002",
      "name": "MSSQL WAITFOR DELAY",
      "category": "Time-Based Blind Injection",
      "description": "Detects MS SQL Server WAITFOR DELAY",
      "regex": "(?i)\\bWAITFOR\\s+DELAY\\s+['\\\"]?\\d{2}:\\d{2}:\\d{2}['\\\"]?",
      "purpose": "Catch MSSQL time-based injection",
      "severity": "CRITICAL",
      "confidence": 0.98,
      "priority": 17,
      "enabled": true,
      "example_matches": [
        "'; WAITFOR DELAY '00:00:05'--",
        "' AND WAITFOR DELAY '00:00:10'--"
      ],
      "false_positive_cases": [
        "Legitimate delay in stored procedures"
      ],
      "notes": "MSSQL specific blind injection"
    },
    {
      "rule_id": "TMB-003",
      "name": "BENCHMARK Function",
      "category": "Time-Based Blind Injection",
      "description": "Detects BENCHMARK function for delays",
      "regex": "(?i)\\bBENCHMARK\\s*\\(\\s*\\d+",
      "purpose": "Identify MySQL BENCHMARK-based delay",
      "severity": "CRITICAL",
      "confidence": 0.95,
      "priority": 16,
      "enabled": true,
      "example_matches": [
        "' AND BENCHMARK(5000000,MD5('A'))--",
        "' OR BENCHMARK(1000000,SHA1('test'))--"
      ],
      "false_positive_cases": [
        "Performance benchmarking scripts"
      ],
      "notes": "CPU-intensive delay method"
    },
    {
      "rule_id": "TMB-004",
      "name": "PostgreSQL pg_sleep",
      "category": "Time-Based Blind Injection",
      "description": "Detects PostgreSQL pg_sleep function",
      "regex": "(?i)\\bpg_sleep\\s*\\(\\s*\\d+",
      "purpose": "Catch PostgreSQL time-based injection",
      "severity": "CRITICAL",
      "confidence": 0.97,
      "priority": 17,
      "enabled": true,
      "example_matches": [
        "'; SELECT pg_sleep(5)--",
        "' AND (SELECT pg_sleep(10))--"
      ],
      "false_positive_cases": [
        "Database maintenance scripts"
      ],
      "notes": "PostgreSQL specific"
    },
    {
      "rule_id": "TMB-005",
      "name": "Heavy Query Delay",
      "category": "Time-Based Blind Injection",
      "description": "Detects heavy query patterns for delay",
      "regex": "(?i)\\b(COUNT|SUM)\\s*\\(\\s*\\*\\s*\\)\\s*FROM\\s+\\w+\\s*WHERE",
      "purpose": "Identify resource-intensive delay attempts",
      "severity": "MEDIUM",
      "confidence": 0.72,
      "priority": 6,
      "enabled": false,
      "example_matches": [
        "' AND (SELECT COUNT(*) FROM huge_table WHERE 1=1)--"
      ],
      "false_positive_cases": [
        "Legitimate aggregate queries"
      ],
      "notes": "Disabled by default, high FP rate"
    },
    {
      "rule_id": "TMB-006",
      "name": "Conditional Sleep",
      "category": "Time-Based Blind Injection",
      "description": "Detects IF/CASE with SLEEP",
      "regex": "(?i)\\b(IF|CASE)\\s*\\([^)]*\\bSLEEP\\s*\\(",
      "purpose": "Catch conditional blind injection",
      "severity": "CRITICAL",
      "confidence": 0.96,
      "priority": 17,
      "enabled": true,
      "example_matches": [
        "' AND IF(1=1, SLEEP(5), 0)--",
        "' AND CASE WHEN 1=1 THEN SLEEP(5) END--"
      ],
      "false_positive_cases": [
        "Complex legitimate queries"
      ],
      "notes": "Advanced blind injection technique"
    },
    {
      "rule_id": "TMB-007",
      "name": "SLEEP with Subquery",
      "category": "Time-Based Blind Injection",
      "description": "Detects SLEEP in subquery",
      "regex": "(?i)\\(\\s*SELECT\\s+.*SLEEP\\s*\\(",
      "purpose": "Identify nested sleep injection",
      "severity": "CRITICAL",
      "confidence": 0.94,
      "priority": 16,
      "enabled": true,
      "example_matches": [
        "' AND (SELECT SLEEP(5))--",
        "' OR (SELECT IF(1=1,SLEEP(5),0))--"
      ],
      "false_positive_cases": [
        "Rare in legitimate queries"
      ],
      "notes": "Subquery-based blind injection"
    },
    {
      "rule_id": "TMB-008",
      "name": "Time Function Arithmetic",
      "category": "Time-Based Blind Injection",
      "description": "Detects manipulation of time functions",
      "regex": "(?i)\\b(NOW|SYSDATE|CURDATE)\\s*\\(\\s*\\)\\s*[+\\-]\\s*INTERVAL",
      "purpose": "Catch time-based data inference",
      "severity": "MEDIUM",
      "confidence": 0.68,
      "priority": 5,
      "enabled": false,
      "example_matches": [
        "' AND NOW() + INTERVAL 10 SECOND--"
      ],
      "false_positive_cases": [
        "Date arithmetic in legitimate queries"
      ],
      "notes": "Experimental, disabled by default"
    },
    {
      "rule_id": "ADV-001",
      "name": "Hexadecimal Encoding",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects hex-encoded strings",
      "regex": "\\b0x[0-9a-fA-F]{8,}",
      "purpose": "Identify hex-encoded payloads",
      "severity": "HIGH",
      "confidence": 0.85,
      "priority": 12,
      "enabled": true,
      "example_matches": [
        "0x61646d696e",
        "SELECT 0x48656c6c6f"
      ],
      "false_positive_cases": [
        "Legitimate hex values in data",
        "Color codes (short hex)",
        "MAC addresses"
      ],
      "notes": "Filter by length, longer = more suspicious"
    },
    {
      "rule_id": "ADV-002",
      "name": "CHAR Function Encoding",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects CHAR() with multiple ASCII values",
      "regex": "(?i)\\bCHAR\\s*\\(\\s*\\d+(\\s*,\\s*\\d+){2,}\\s*\\)",
      "purpose": "Catch ASCII-encoded injection",
      "severity": "HIGH",
      "confidence": 0.9,
      "priority": 13,
      "enabled": true,
      "example_matches": [
        "CHAR(97,100,109,105,110)",
        "CHAR(115,101,108,101,99,116)"
      ],
      "false_positive_cases": [
        "Character set conversions"
      ],
      "notes": "Common obfuscation technique"
    },
    {
      "rule_id": "ADV-003",
      "name": "URL Encoding in Query",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects URL-encoded characters",
      "regex": "(%27|%20|%3D|%2D|%3B|%2F|%28|%29){2,}",
      "purpose": "Identify URL-encoded injection attempts",
      "severity": "MEDIUM",
      "confidence": 0.78,
      "priority": 8,
      "enabled": true,
      "example_matches": [
        "%27%20OR%201=1--",
        "%27%20UNION%20SELECT%20--"
      ],
      "false_positive_cases": [
        "Legitimate URL-encoded parameters"
      ],
      "notes": "Requires URL decoding before analysis"
    },
    {
      "rule_id": "ADV-004",
      "name": "xp_cmdshell Execution",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects MSSQL xp_cmdshell",
      "regex": "(?i)\\bxp_cmdshell\\s*[('\\\"]",
      "purpose": "Catch OS command execution attempts",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 20,
      "enabled": true,
      "example_matches": [
        "'; EXEC xp_cmdshell('net user')--",
        "'; EXEC xp_cmdshell('dir')--"
      ],
      "false_positive_cases": [
        "DBA maintenance scripts"
      ],
      "notes": "Remote code execution, highest severity"
    },
    {
      "rule_id": "ADV-005",
      "name": "Stored Procedure Abuse",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects suspicious sp_ procedures",
      "regex": "(?i)\\bsp_(executesql|addrolemember|addsrvrolemember|password)",
      "purpose": "Identify privilege escalation via stored procs",
      "severity": "CRITICAL",
      "confidence": 0.97,
      "priority": 18,
      "enabled": true,
      "example_matches": [
        "'; EXEC sp_addrolemember 'db_owner', 'attacker'--",
        "'; EXEC sp_executesql N'DROP TABLE users'--"
      ],
      "false_positive_cases": [
        "Legitimate admin operations"
      ],
      "notes": "MSSQL privilege escalation"
    },
    {
      "rule_id": "ADV-006",
      "name": "LOAD_FILE Function",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects MySQL LOAD_FILE",
      "regex": "(?i)\\bLOAD_FILE\\s*\\(['\\\"]",
      "purpose": "Catch file system read attempts",
      "severity": "CRITICAL",
      "confidence": 0.98,
      "priority": 19,
      "enabled": true,
      "example_matches": [
        "UNION SELECT LOAD_FILE('/etc/passwd')--",
        "' AND LOAD_FILE('C:\\\\boot.ini')--"
      ],
      "false_positive_cases": [
        "Legitimate file import"
      ],
      "notes": "Sensitive file access"
    },
    {
      "rule_id": "ADV-007",
      "name": "INTO OUTFILE Write",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects INTO OUTFILE",
      "regex": "(?i)\\bINTO\\s+(OUTFILE|DUMPFILE)\\s+['\\\"]",
      "purpose": "Identify file write attempts",
      "severity": "CRITICAL",
      "confidence": 0.99,
      "priority": 20,
      "enabled": true,
      "example_matches": [
        "SELECT '<?php ?>' INTO OUTFILE '/var/www/shell.php'--"
      ],
      "false_positive_cases": [
        "Data export operations"
      ],
      "notes": "Web shell creation, RCE"
    },
    {
      "rule_id": "ADV-008",
      "name": "EXTRACTVALUE XML Injection",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects EXTRACTVALUE for error-based injection",
      "regex": "(?i)\\bEXTRACTVALUE\\s*\\(",
      "purpose": "Catch XML-based data extraction",
      "severity": "HIGH",
      "confidence": 0.92,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "' AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT @@version)))--"
      ],
      "false_positive_cases": [
        "XML processing queries"
      ],
      "notes": "Error-based injection technique"
    },
    {
      "rule_id": "ADV-009",
      "name": "UPDATEXML Injection",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects UPDATEXML for injection",
      "regex": "(?i)\\bUPDATEXML\\s*\\(",
      "purpose": "Identify XML-based injection",
      "severity": "HIGH",
      "confidence": 0.91,
      "priority": 13,
      "enabled": true,
      "example_matches": [
        "' AND UPDATEXML(1, CONCAT(0x7e, (SELECT user())), 1)--"
      ],
      "false_positive_cases": [
        "XML update operations"
      ],
      "notes": "Error-based technique"
    },
    {
      "rule_id": "ADV-010",
      "name": "Multi-Encoding Attack",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects mixed encoding (hex + URL)",
      "regex": "(%[0-9a-fA-F]{2}.*0x[0-9a-fA-F]+)|(0x[0-9a-fA-F]+.*%[0-9a-fA-F]{2})",
      "purpose": "Catch multi-layer obfuscation",
      "severity": "HIGH",
      "confidence": 0.88,
      "priority": 12,
      "enabled": true,
      "example_matches": [
        "%27%200x61646d696e",
        "0x41%20%20%27"
      ],
      "false_positive_cases": [
        "Rare in legitimate traffic"
      ],
      "notes": "Advanced evasion attempt"
    },
    {
      "rule_id": "ADV-011",
      "name": "Concatenation Obfuscation",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects excessive CONCAT usage",
      "regex": "(?i)\\bCONCAT\\s*\\(.*CONCAT\\s*\\(",
      "purpose": "Identify nested concatenation evasion",
      "severity": "MEDIUM",
      "confidence": 0.75,
      "priority": 7,
      "enabled": true,
      "example_matches": [
        "CONCAT(CONCAT('SE','LECT'), ' * FROM users')",
        "CONCAT(CONCAT(0x41,0x42),0x43)"
      ],
      "false_positive_cases": [
        "Complex string building"
      ],
      "notes": "Keyword fragmentation technique"
    },
    {
      "rule_id": "ADV-012",
      "name": "Alternative Comment Syntax",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects MySQL alternative comment",
      "regex": "(?i)/\\*!\\d{5}",
      "purpose": "Catch version-conditional code",
      "severity": "HIGH",
      "confidence": 0.93,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "/*!50000UNION*/",
        "/*!32302AND*/1=1"
      ],
      "false_positive_cases": [
        "Rare in user input"
      ],
      "notes": "MySQL version-specific execution"
    },
    {
      "rule_id": "ADV-013",
      "name": "White Space Obfuscation",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects excessive whitespace between keywords",
      "regex": "(?i)\\b(SELECT|UNION|FROM|WHERE)\\s{5,}(\\w+|\\*)",
      "purpose": "Identify whitespace evasion",
      "severity": "LOW",
      "confidence": 0.65,
      "priority": 4,
      "enabled": false,
      "example_matches": [
        "SELECT     * FROM users",
        "UNION          SELECT"
      ],
      "false_positive_cases": [
        "Formatted SQL",
        "Pretty-printed queries"
      ],
      "notes": "Disabled by default, experimental"
    },
    {
      "rule_id": "ADV-014",
      "name": "Case Alternation Evasion",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects alternating case in keywords",
      "regex": "\\b[Ss][Ee][Ll][Ee][Cc][Tt]\\b|\\b[Uu][Nn][Ii][Oo][Nn]\\b",
      "purpose": "Catch case-based WAF bypass",
      "severity": "LOW",
      "confidence": 0.6,
      "priority": 3,
      "enabled": false,
      "example_matches": [
        "SeLeCt * FROM users",
        "UnIoN SELECT"
      ],
      "false_positive_cases": [
        "User-entered mixed case"
      ],
      "notes": "Redundant if case-insensitive matching used"
    },
    {
      "rule_id": "ADV-015",
      "name": "Scientific Notation Numbers",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects scientific notation in injection",
      "regex": "\\b\\d+[eE][+-]?\\d+",
      "purpose": "Identify numeric obfuscation",
      "severity": "LOW",
      "confidence": 0.62,
      "priority": 3,
      "enabled": false,
      "example_matches": [
        "1e0",
        "1e1"
      ],
      "false_positive_cases": [
        "Legitimate scientific notation in data"
      ],
      "notes": "Rare evasion technique, low priority"
    },
    {
      "rule_id": "OBF-001",
      "name": "Inline Comment Obfuscation",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects SQL keywords split by comments",
      "regex": "(?i)(UN|SE|OR|AN|DR|DE|IN)(\\/\\*.*?\\*\\/|--.*?[\\n\\r])(ION|LECT|D|OP|LETE|SERT)",
      "severity": "HIGH",
      "confidence": 0.92,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "UN/**/ION",
        "SE/**/LECT",
        "DR/**/OP"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "OBF-002",
      "name": "Excessive Whitespace Obfuscation",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects SQL keywords with excessive spacing",
      "regex": "(?i)(UNION|SELECT|DROP|DELETE|INSERT)\\s{5,}(SELECT|FROM|TABLE|WHERE)",
      "severity": "MEDIUM",
      "confidence": 0.85,
      "priority": 10,
      "enabled": true,
      "example_matches": [
        "UNION          SELECT",
        "DROP     TABLE"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "OBF-003",
      "name": "Mixed Case Keyword Evasion",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects intentional case mixing",
      "regex": "['\\\"].*?(UnIoN|SeLeCt|DrOp|WhErE|InSeRt|DeLeTe|ExEc)",
      "severity": "HIGH",
      "confidence": 0.88,
      "priority": 12,
      "enabled": true,
      "example_matches": [
        "' UnIoN SeLeCt",
        "' DrOp TaBlE"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "OBF-004",
      "name": "Multiple Parentheses Nesting",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects deep nesting used for evasion",
      "regex": "\\(\\s*\\(\\s*\\(\\s*(SELECT|UNION|OR)",
      "severity": "HIGH",
      "confidence": 0.9,
      "priority": 13,
      "enabled": true,
      "example_matches": [
        "(((SELECT",
        "((( OR"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "OBF-005",
      "name": "Octal Encoding",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects octal encoded values",
      "regex": "0o[0-7]{2,}|0b[01]{8,}",
      "severity": "MEDIUM",
      "confidence": 0.87,
      "priority": 11,
      "enabled": true,
      "example_matches": [
        "0o141",
        "0b01000001"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "OBF-006",
      "name": "Concatenated SQL Keywords",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects CONCAT used to build SQL",
      "regex": "(?i)CONCAT\\s*\\(\\s*['\\\"](SELECT|UNION|DROP|DELETE)['\\\"]\\s*,",
      "severity": "HIGH",
      "confidence": 0.93,
      "priority": 14,
      "enabled": true,
      "example_matches": [
        "CONCAT('SE','LECT')",
        "CONCAT('UN','ION')"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "OBF-007",
      "name": "Alternative Quote Styles",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects backticks and alternative quoting",
      "regex": "`.*?(SELECT|UNION|OR|AND|DROP).*?`",
      "severity": "MEDIUM",
      "confidence": 0.82,
      "priority": 9,
      "enabled": true,
      "example_matches": [
        "`admin` OR `1`=`1`"
      ],
      "false_positive_cases": [
        "MySQL column names"
      ]
    },
    {
      "rule_id": "OBF-008",
      "name": "Scientific Notation Obfuscation",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects scientific notation abuse",
      "regex": "['\\\"].*?\\d+[eE][+-]?\\d+",
      "severity": "LOW",
      "confidence": 0.75,
      "priority": 7,
      "enabled": true,
      "example_matches": [
        "' OR 1e5",
        "1e10 OR"
      ],
      "false_positive_cases": [
        "Legitimate scientific values"
      ]
    },
    {
      "rule_id": "TAU-011",
      "name": "Always True Numeric Comparison",
      "category": "Tautology-Based Injection",
      "description": "Detects numeric tautologies like 5>4",
      "regex": "(?i)['\\\"].*?OR\\s+\\d+\\s*[><=!]+\\s*\\d+",
      "severity": "HIGH",
      "confidence": 0.88,
      "priority": 11,
      "enabled": true,
      "example_matches": [
        "' OR 5>4",
        "' OR 10=10"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "TAU-012",
      "name": "String Concatenation Tautology",
      "category": "Tautology-Based Injection",
      "description": "Detects string concat in conditions",
      "regex": "(?i)['\\\"].*?OR\\s+['\\\"]\\s*\\+\\s*['\\\"]",
      "severity": "MEDIUM",
      "confidence": 0.8,
      "priority": 8,
      "enabled": true,
      "example_matches": [
        "' OR 'a'+'b'='ab"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "UNI-011",
      "name": "UNION with Column Count Testing",
      "category": "UNION-Based Injection",
      "description": "Detects sequential NULL enumeration",
      "regex": "(?i)UNION\\s+SELECT\\s+(NULL\\s*,\\s*){2,}NULL",
      "severity": "CRITICAL",
      "confidence": 0.96,
      "priority": 16,
      "enabled": true,
      "example_matches": [
        "UNION SELECT NULL, NULL, NULL"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "CMT-008",
      "name": "Comment After Quote",
      "category": "Comment-Based Injection",
      "description": "Detects comment immediately after closing quote",
      "regex": "['\\\"][\\s]*(--|#|\\/\\*)",
      "severity": "HIGH",
      "confidence": 0.94,
      "priority": 15,
      "enabled": true,
      "example_matches": [
        "'--",
        "' --",
        "'#"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "STK-009",
      "name": "Multiple Semicolons",
      "category": "Stacked Queries Injection",
      "description": "Detects multiple statement terminators",
      "regex": ";.*;",
      "severity": "HIGH",
      "confidence": 0.89,
      "priority": 12,
      "enabled": true,
      "example_matches": [
        "; DROP TABLE users; --"
      ],
      "false_positive_cases": [
        "Programming code samples"
      ]
    },
    {
      "rule_id": "ADV-013",
      "name": "SQL Function Chaining",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects nested SQL functions",
      "regex": "(?i)(CHAR|ASCII|HEX|UNHEX|CONV)\\s*\\(\\s*(CHAR|ASCII|HEX)",
      "severity": "HIGH",
      "confidence": 0.91,
      "priority": 13,
      "enabled": true,
      "example_matches": [
        "CHAR(HEX(65))"
      ],
      "false_positive_cases": []
    },
    {
      "rule_id": "ADV-014",
      "name": "Database Fingerprinting",
      "category": "Advanced & Evasion Techniques",
      "description": "Detects DB version queries",
      "regex": "(?i)(@@version|version\\(\\)|sqlite_version|pg_version)",
      "severity": "MEDIUM",
      "confidence": 0.86,
      "priority": 10,
      "enabled": true,
      "example_matches": [
        "SELECT @@version",
        "version()"
      ],
      "false_positive_cases": [
        "Legitimate version checks"
      ]
    }
  ],
  "updated": "2025-10-18 16:46:34",
  "changelog": "Added 15 obfuscation detection rules + fixed 2 broken rules"
}